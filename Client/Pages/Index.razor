@page "/"
@inject IProductoProxy productoProxy
@inject IToastService ToastService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Inicio</PageTitle>
<h1 class="titulo">Escoge tu mejor opción</h1>
<div>
	<div class="row justify-content-center mt-3 mb-4">
		<div class="col-sm-6 col-md-6 col-xl-6">
			<div class="input-group">
				<input type="text" class="form-control" placeholder="Buscar producto" @onkeypress="OnTeclaPresionada" @bind-value="Buscar"/>
				<button class="btn btn-secondary" @onclick="ObtenerCatalogo">
					<i class="bi bi-search"></i>
				</button>
			</div>
		</div>
		<div class="col-3">
			@if(Categorias is not null)
			{
				<select class="form-select" @onchange="OnSelectionChange">
					<option>-Categoria-</option>
					@foreach(var categoria in Categorias)
					{
						<option value="@categoria.Id">@categoria.Nombre</option>
					}
				</select>
			}
		</div>
	</div>
</div>

@if(Productos is not null)
{
	var filter = Productos;

	if(CategoriaSeleccionada is { } catSeleccionada)//pattern maching
	{
		filter = Productos.Where(p => p.CategoriaId == catSeleccionada).ToList();
	}

	<div class="container mb-5 gap-5">
		<div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-5 justify-content-center">
			@foreach(var producto in filter)
			{
				<ProductCard Producto="producto" OnClick="VerDetalle" />
			}
		</div>
	</div>
}

<LoadingComponent IsLoading="IsLoading"/>

@code{
	public ICollection<ProductoDto>? Productos { get; set; }
	public ICollection<CategoriaDto>? Categorias { get; set; }
	private int? CategoriaSeleccionada { get; set; }

	public string Buscar { get; set; } = default!;
	public bool IsLoading { get; set; }


	private async Task ObtenerCatalogo()
	{
		try
		{
			IsLoading = true;
			Productos = await productoProxy.ListAsyn(Buscar);
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
		finally
		{
			IsLoading = false;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await ObtenerCatalogo();

		var response = await HttpClient.GetFromJsonAsync<ICollection<CategoriaDto>>("api/Categorias");
		if (response != null)
		{
			Categorias = response;
		}
	}

	private void OnSelectionChange(ChangeEventArgs args)
	{
		if(args.Value!.ToString()!.Contains("-"))
		{
			CategoriaSeleccionada = null;
		}
		else{
			CategoriaSeleccionada = int.Parse(args.Value.ToString()!);
		}
	}

	private async Task OnTeclaPresionada(KeyboardEventArgs args)
	{
		//Console.WriteLine(args.Key);

		if (args.Key.Equals("Enter", StringComparison.InvariantCultureIgnoreCase))
		{
			await ObtenerCatalogo();
		}		
	}

	private void VerDetalle(int id)
	{
		NavigationManager.NavigateTo($"/detalle/{id}");
	}
}