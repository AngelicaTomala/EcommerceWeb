@page "/productos/editar/{Id:int}"
@using EcommerceWeb.Shared.Request;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h3>Editar Producto</h3>
<ProductoEditPage Categorias="Categorias" Marcas="Marcas" Producto="Producto" OnGrabar="Actualizar"/>

@code {
	[Parameter]
	public int Id { get; set; }
	public ProductoDtoRequest Producto { get; set; } = new ProductoDtoRequest();
	public ICollection<CategoriaDto> Categorias { get; set; } = new List<CategoriaDto>();
	public ICollection<MarcaDTO> Marcas { get; set; } = new List<MarcaDTO>();

	private async Task Actualizar()
	{
		try
		{
			await HttpClient.PutAsJsonAsync($"api/Productos/{Id}", Producto);
			ToastService.ShowInfo("Actualización de producto registrado correctamente");
			NavigationManager.NavigateTo("/productos");
		}
		catch (Exception ex)
		{

			ToastService.ShowError(ex.Message);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await HttpClient.GetAsync($"api/productos/{Id}");

			//primera manera para preguntar si la respuesta es sustafistaoria
			// if (response.IsSuccessStatusCode)
			// {

			// }

			//segunda manera: en caso de que la respuesta no se satisfactoria que lanze una excepcion
			response.EnsureSuccessStatusCode();

			//en el caso de que no este mal lo colo de la siguiente manera
			//como sabemos que es asincrona le ponemos ! para que evite el null
			Producto = (await response.Content.ReadFromJsonAsync<ProductoDtoRequest>())!;

			var responseCategorias = await HttpClient.GetFromJsonAsync<ICollection<CategoriaDto>>("api/Categorias");
			if (responseCategorias is not null)
			{
				Categorias = responseCategorias;
			}

			var responseMarcas = await HttpClient.GetFromJsonAsync<ICollection<MarcaDTO>>("api/Marcas");

			if (responseMarcas is not null)
			{
				Marcas = responseMarcas;
			}
		}
		catch (Exception ex)
		{

			ToastService.ShowError(ex.Message);
		}


		
	}
}
