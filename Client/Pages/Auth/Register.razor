@page "/register"
@using EcommerceWeb.Client.Auth;
@inject IUserProxy UserProxy
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="container">
	<div class="row justify-content-center">
		<div class="col-lg-6">
			<div class="card shadow-lg mt-5">
				<div class="card-header">
					<h3>Crear cuenta</h3>
				</div>
				<div class="card-body">
					<EditForm Model="Request" OnValidSubmit="ValidRegister">
						<DataAnnotationsValidator/>
						<div class="form-floating mb-3">
							<input type="text" class="form-control" id="nombre" @bind-value="Request.NombreCompleto" placeholder="Nombre completo" autocomplete="off">
							<label for="nombre">Nombre Completo</label>
							<ValidationMessage For="() => Request.NombreCompleto"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="date" class="form-control" id="fechaNacimiento" @bind-value="Request.FechaNacimiento" placeholder="Fecha Nacimiento" autocomplete="off">
							<label for="fechaNacimiento">Fecha Nacimiento</label>
							<ValidationMessage For="() => Request.FechaNacimiento"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="text" class="form-control" id="direccion" @bind-value="Request.Direccion" placeholder="Direccion" autocomplete="off">
							<label for="direccion">Dirección</label>
							<ValidationMessage For="() => Request.Direccion"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="text" class="form-control" id="nombreUsuario" @bind-value="Request.NombreUsuario" placeholder="Nombre de Usuario" autocomplete="off">
							<label for="nombreUsuario">Usuario</label>
							<ValidationMessage For="() => Request.NombreUsuario"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="email" class="form-control" id="email" @bind-value="Request.Email" placeholder="Email" autocomplete="off">
							<label for="email">Email</label>
							<ValidationMessage For="() => Request.Email"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="password" class="form-control" id="password" @bind-value="Request.Password" placeholder="Password" autocomplete="off">
							<label for="password">Clave</label>
							<ValidationMessage For="() => Request.Password"></ValidationMessage>
						</div>
						<div class="form-floating mb-3">
							<input type="password" class="form-control" id="ConfPassword" @bind-value="Request.ConfirmPassword" placeholder="Confirmar Password" autocomplete="off">
							<label for="ConfPassword">Confirmar Clave</label>
							<ValidationMessage For="() => Request.ConfirmPassword"></ValidationMessage>
						</div>
						<div class="d-grid gap-1 mt-3">
							<button class="btn btn-primary">Crear cuenta</button>
						</div>
					</EditForm>
					<div class="card-footer text-center py-3">
						<div class="small">
							<NavLink class="nav-link" href="login">¿Ya tienes una cuenta? Inicia Sesión</NavLink>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<LoadingComponent IsLoading="IsLoading" />

@code {
	public RegistrarUsuarioDto Request { get; set; } = new RegistrarUsuarioDto();
	public bool IsLoading { get; set; }

	private async Task ValidRegister()
	{
		try
		{
			IsLoading = true;
			await UserProxy.Register(Request);
			ToastService.ShowSuccess("Su cuenta ha sido creada");
			NavigationManager.NavigateTo("/login");
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
		finally
		{
			IsLoading = false;
		}
	}
}
